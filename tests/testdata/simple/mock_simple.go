// Code generated by MockGen. DO NOT EDIT.
// Source: simple.go

// Package mock_simple is a generated GoMock package.
package mock_simple

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSimple is a mock of Simple interface.
type MockSimple struct {
	ctrl     *gomock.Controller
	recorder *MockSimpleMockRecorder
}

// MockSimpleMockRecorder is the mock recorder for MockSimple.
type MockSimpleMockRecorder struct {
	mock *MockSimple
}

// NewMockSimple creates a new mock instance.
func NewMockSimple(ctrl *gomock.Controller) *MockSimple {
	mock := &MockSimple{ctrl: ctrl}
	mock.recorder = &MockSimpleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSimple) EXPECT() *MockSimpleMockRecorder {
	return m.recorder
}

// DoSomething mocks base method.
func (m *MockSimple) DoSomething() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoSomething")
	ret0, _ := ret[0].(error)
	return ret0
}

// DoSomething indicates an expected call of DoSomething.
func (mr *MockSimpleMockRecorder) DoSomething() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoSomething", reflect.TypeOf((*MockSimple)(nil).DoSomething))
}

// GetValue mocks base method.
func (m *MockSimple) GetValue() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValue")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetValue indicates an expected call of GetValue.
func (mr *MockSimpleMockRecorder) GetValue() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValue", reflect.TypeOf((*MockSimple)(nil).GetValue))
}
